import React from 'react'
import Head from 'next/head'
import Link from 'next/link';
import Tabs from '../../components/Tabs';
import type { GetServerSideProps } from 'next';
import { IArticle, ICategory, ICollectionResponse, IPagination } from '../../types';
import { AxiosResponse } from 'axios';
import { fetchArticles, fetchCategories } from '../../http';
import qs from 'qs';
import ArticleList from '../../components/ArticleList';
import { capitalizeFirstLetter, makeCategory } from '../../utils';

interface IPropsType {
  categories: {
    items: ICategory[];
    pagination: IPagination;
  },
  articles: {
    items: IArticle[];
    pagination: IPagination;
  },
  slug: string
}
const category = ({ categories, articles, slug }: IPropsType) => {
  const formattedCategory = () => {
    return capitalizeFirstLetter(makeCategory(slug));
  }
  return (
    <>
      <Head>
        <title>LazyCoder's Blog {formattedCategory()}</title>
        <meta name="description" content="generated by create next app" />
        <Link rel="icon" href="/skm.png" />
      </Head>
      <Tabs categories={categories.items} />
      <ArticleList articles={articles.items} />
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {

  const options = {
    populate: ['author.avatar'],
    // sort: ['id: desc'],
    filters: {
      category: {
        slug: query.category,
      }
    }
  }

  const queryString = qs.stringify(options);

  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString);

  return {
    props: {
      categories: {
        items: categories.data,
        pagination: categories.meta.pagination
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination
      },
      slug: query.category
    }
  }
}

export default category