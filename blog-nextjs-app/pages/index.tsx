import { AxiosResponse } from 'axios';
import type { NextPage, GetServerSideProps } from 'next';
import Head from 'next/head'
import ArticleList from '../components/ArticleList';
import Tabs from '../components/Tabs';
import { fetchArticles, fetchCategories } from '../http';
import { IArticle, IPagination, ICategory, ICollectionResponse } from '../types';
import qs from 'qs';
import Pagination from '../components/Pagination';
import { useRouter } from 'next/router';


interface IPropTypes {
  categories: {
    items: ICategory[];
  };
  articles: {
    items: IArticle[];
    pagination: IPagination;
  }
}

const Home: NextPage<IPropTypes> = ({ categories, articles }) => {

  const router = useRouter();

  const { page, pageCount } = articles.pagination;

  

  return (
    <>
      <Head>
        <title>Next app</title>
        <meta name="description" content="generated by create next app" />
      </Head>
      <Tabs categories={categories.items} />
      <ArticleList articles={articles.items} />
      <Pagination page={page} pageCount={pageCount} />
    </>
  )
};

export const getServerSideProps: GetServerSideProps = async ({query}) => {

  const options = {
    populate: ['author.avatar'],
    pagination: {
      page: query.page ? query.page : 1,
    }
  };

  const queryString = qs.stringify(options);

  // categories
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString);

  console.log(JSON.stringify(queryString))

  return {
    props: {
      categories: {
        items: categories.data
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      }
    }
  }
}

export default Home;
